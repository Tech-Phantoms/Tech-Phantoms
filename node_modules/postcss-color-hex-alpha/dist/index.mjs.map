{"version":3,"file":"index.mjs","sources":["../src/options.js","../src/onCSSDeclaration.js","../src/index.js"],"sourcesContent":["export default {\n\t/** Whether to preserve the original functional color declaration. */\n\tpreserve: false\n}\n","import { parse } from 'postcss-values-parser';\nimport Func from 'postcss-values-parser/lib/nodes/Func';\nimport Punctuation from 'postcss-values-parser/lib/nodes/Punctuation';\nimport options from './options';\n\n/** @type {(decl: CSSDeclaration) => void} Transform 4 & 8 character hex color notation in CSS Declarations. */\nconst onCSSDeclaration = (decl) => {\n\tif (hasAlphaHex(decl)) {\n\t\tconst { value: originalValue } = decl;\n\n\t\t// replace instances of hexa with rgba()\n\t\tconst valueAST = parse(originalValue);\n\n\t\twalk(valueAST, (node) => {\n\t\t\tif (isAlphaHex(node)) {\n\t\t\t\tnode.replaceWith(hexa2rgba(node));\n\t\t\t}\n\t\t});\n\n\t\tconst modifiedValue = String(valueAST);\n\n\t\tif (modifiedValue !== originalValue) {\n\t\t\tif (options.preserve) decl.cloneBefore({ value: modifiedValue });\n\t\t\telse decl.value = modifiedValue;\n\t\t}\n\t}\n};\n\n/** Expresssion to match an exact hexa */\nconst alphaHexValueRegExp = /^#([0-9A-Fa-f]{4}(?:[0-9A-Fa-f]{4})?)$/;\n\n/** Expresssion to match any hexa */\nconst alphaHexRegExp = /#([0-9A-Fa-f]{4}(?:[0-9A-Fa-f]{4})?)\\b/;\n\n/** Returns whether a node has a hexa. */\nconst hasAlphaHex = (node) => alphaHexRegExp.test(node.value);\n\n/** Returns whether a node matches a hexa node. */\nconst isAlphaHex = (node) =>\n\tnode.type === 'word' && alphaHexValueRegExp.test(node.value);\n\n/** Walks all nodes in a value. */\nconst walk = (node, fn) => {\n\tif (Object(node.nodes).length) {\n\t\tnode.nodes.slice().forEach((child) => {\n\t\t\tfn(child);\n\n\t\t\twalk(child, fn);\n\t\t});\n\t}\n};\n\n/** Decimal precision. */\nconst alphaDecimalPrecision = 100000;\n\nconst hexa2rgba = (node) => {\n\t// hex is the node value\n\tconst hex = node.value;\n\n\t// conditionally expand a hex\n\tconst hex8 = `0x${\n\t\thex.length === 5 ? hex.slice(1).replace(/[0-9A-f]/g, '$&$&') : hex.slice(1)\n\t}`;\n\n\t// extract the red, blue, green, and alpha values from the hex\n\tconst [r, g, b, a] = [\n\t\tparseInt(hex8.slice(2, 4), 16),\n\t\tparseInt(hex8.slice(4, 6), 16),\n\t\tparseInt(hex8.slice(6, 8), 16),\n\t\tMath.round(\n\t\t\t(parseInt(hex8.slice(8, 10), 16) / 255) * alphaDecimalPrecision\n\t\t) / alphaDecimalPrecision,\n\t];\n\n\t// return a new rgba function, preserving the whitespace of the original node\n\tconst rgbaFunc = Object.assign(\n\t\tnew Func({\n\t\t\tname: 'rgba',\n\t\t\traws: {},\n\t\t}),\n\t\t{\n\t\t\traws: node.raws,\n\t\t}\n\t);\n\n\trgbaFunc.append(createNumberNode(r));\n\trgbaFunc.append(new Punctuation({ value: ',' }));\n\trgbaFunc.append(createNumberNode(g));\n\trgbaFunc.append(new Punctuation({ value: ',' }));\n\trgbaFunc.append(createNumberNode(b));\n\trgbaFunc.append(new Punctuation({ value: ',' }));\n\trgbaFunc.append(createNumberNode(a));\n\n\treturn rgbaFunc;\n};\n\nconst createNumberNode = (number) => parse(number).first;\n\nexport default onCSSDeclaration;\n\n/** @typedef {import('postcss').Declaration} CSSDeclaration */\n","import onCSSDeclaration from './onCSSDeclaration'\nimport options from './options'\n\n/** Transform 4 & 8 character hex color notation in CSS. */\nexport default function postcssColorHexAlpha(/** @type {PostCSSPluginInitializer} */ opts) {\n\toptions.preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false\n\n\treturn {\n\t\tpostcssPlugin: 'postcss-color-hex-alpha',\n\t\tDeclaration: onCSSDeclaration\n\t}\n}\n\npostcssColorHexAlpha.postcss = true\n"],"names":["preserve","onCSSDeclaration","decl","hasAlphaHex","value","originalValue","valueAST","parse","walk","node","isAlphaHex","replaceWith","hexa2rgba","modifiedValue","String","options","cloneBefore","alphaHexValueRegExp","alphaHexRegExp","test","type","fn","Object","nodes","length","slice","forEach","child","alphaDecimalPrecision","hex","hex8","replace","r","g","b","a","parseInt","Math","round","rgbaFunc","assign","Func","name","raws","append","createNumberNode","Punctuation","number","first","postcssColorHexAlpha","opts","Boolean","postcssPlugin","Declaration","postcss"],"mappings":"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"}