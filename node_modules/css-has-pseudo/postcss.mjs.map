{"version":3,"file":"postcss.mjs","sources":["src/postcss.js"],"sourcesContent":["import parser from 'postcss-selector-parser'\n\nconst creator = (/** @type {{ preserve: true | false }} */ opts) => {\n\topts = typeof opts === 'object' && opts || defaultOptions\n\n\t/** Whether the original rule should be preserved. */\n\tconst shouldPreserve = Boolean('preserve' in opts ? opts.preserve : true)\n\n\treturn {\n\t\tpostcssPlugin: 'css-has-pseudo',\n\t\tRule: rule => {\n\t\t\tif (rule.selector.includes(':has(')) {\n\t\t\t\tconst fallbackSelector = getFallbackSelector(rule.selector)\n\n\t\t\t\tif (shouldPreserve) rule.cloneBefore({ selector: fallbackSelector })\n\t\t\t\telse rule.assign({ selector: fallbackSelector })\n\t\t\t}\n\t\t},\n\t}\n}\n\ncreator.postcss = true\n\nconst getFallbackSelector = (/** @type {string} */ selectorText) => parser(selectors => {\n\tselectors.walkPseudos(selector => {\n\t\tif (selector.value === ':has' && selector.nodes) {\n\t\t\tconst isNotHas = isParentInNotPseudo(selector)\n\n\t\t\tselector.value = isNotHas ? ':not-has' : ':has'\n\n\t\t\tconst attribute = parser.attribute({\n\t\t\t\tattribute: getEscapedCss(String(selector))\n\t\t\t})\n\n\t\t\tif (isNotHas) {\n\t\t\t\tselector.parent.parent.replaceWith(attribute)\n\t\t\t} else {\n\t\t\t\tselector.replaceWith(attribute)\n\t\t\t}\n\t\t}\n\t})\n}).processSync(selectorText)\n\n/** Default options. */\nconst defaultOptions = { preserve: true }\n\n/** Returns the string as an escaped CSS identifier. */\nconst getEscapedCss = (/** @type {string} */ value) => encodeURIComponent(value).replace(/%3A/g, ':').replace(/%5B/g, '[').replace(/%5D/g, ']').replace(/%2C/g, ',').replace(/[():%[\\],]/g, '\\\\$&')\n\n/** Returns whether the selector is within a `:not` pseudo-class. */\nconst isParentInNotPseudo = (selector) => selector.parent?.parent?.type === 'pseudo' && selector.parent.parent.value === ':not'\n\nexport default creator\n"],"names":["creator","opts","defaultOptions","shouldPreserve","Boolean","preserve","postcssPlugin","Rule","rule","selector","includes","fallbackSelector","getFallbackSelector","cloneBefore","assign","postcss","selectorText","parser","selectors","walkPseudos","value","nodes","isNotHas","isParentInNotPseudo","attribute","getEscapedCss","String","parent","replaceWith","processSync","encodeURIComponent","replace","type"],"mappings":";;MAEMA,OAAO,GAAG;AAAC;AAA0CC,IAA3C,KAAoD;AACnEA,EAAAA,IAAI,GAAG,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAA5B,IAAoCC,cAA3C;AAEA;;AACA,QAAMC,cAAc,GAAGC,OAAO,CAAC,cAAcH,IAAd,GAAqBA,IAAI,CAACI,QAA1B,GAAqC,IAAtC,CAA9B;AAEA,SAAO;AACNC,IAAAA,aAAa,EAAE,gBADT;AAENC,IAAAA,IAAI,EAAEC,IAAI,IAAI;AACb,UAAIA,IAAI,CAACC,QAAL,CAAcC,QAAd,CAAuB,OAAvB,CAAJ,EAAqC;AACpC,cAAMC,gBAAgB,GAAGC,mBAAmB,CAACJ,IAAI,CAACC,QAAN,CAA5C;AAEA,YAAIN,cAAJ,EAAoBK,IAAI,CAACK,WAAL,CAAiB;AAAEJ,UAAAA,QAAQ,EAAEE;AAAZ,SAAjB,EAApB,KACKH,IAAI,CAACM,MAAL,CAAY;AAAEL,UAAAA,QAAQ,EAAEE;AAAZ,SAAZ;AACL;AACD;AATK,GAAP;AAWA;;AAEDX,OAAO,CAACe,OAAR,GAAkB,IAAlB;;AAEA,MAAMH,mBAAmB,GAAG;AAAC;AAAsBI,YAAvB,KAAwCC,MAAM,CAACC,SAAS,IAAI;AACvFA,EAAAA,SAAS,CAACC,WAAV,CAAsBV,QAAQ,IAAI;AACjC,QAAIA,QAAQ,CAACW,KAAT,KAAmB,MAAnB,IAA6BX,QAAQ,CAACY,KAA1C,EAAiD;AAChD,YAAMC,QAAQ,GAAGC,mBAAmB,CAACd,QAAD,CAApC;AAEAA,MAAAA,QAAQ,CAACW,KAAT,GAAiBE,QAAQ,GAAG,UAAH,GAAgB,MAAzC;AAEA,YAAME,SAAS,GAAGP,MAAM,CAACO,SAAP,CAAiB;AAClCA,QAAAA,SAAS,EAAEC,aAAa,CAACC,MAAM,CAACjB,QAAD,CAAP;AADU,OAAjB,CAAlB;;AAIA,UAAIa,QAAJ,EAAc;AACbb,QAAAA,QAAQ,CAACkB,MAAT,CAAgBA,MAAhB,CAAuBC,WAAvB,CAAmCJ,SAAnC;AACA,OAFD,MAEO;AACNf,QAAAA,QAAQ,CAACmB,WAAT,CAAqBJ,SAArB;AACA;AACD;AACD,GAhBD;AAiBA,CAlByE,CAAN,CAkBjEK,WAlBiE,CAkBrDb,YAlBqD,CAApE;AAoBA;;;AACA,MAAMd,cAAc,GAAG;AAAEG,EAAAA,QAAQ,EAAE;AAAZ,CAAvB;AAEA;;AACA,MAAMoB,aAAa,GAAG;AAAC;AAAsBL,KAAvB,KAAiCU,kBAAkB,CAACV,KAAD,CAAlB,CAA0BW,OAA1B,CAAkC,MAAlC,EAA0C,GAA1C,EAA+CA,OAA/C,CAAuD,MAAvD,EAA+D,GAA/D,EAAoEA,OAApE,CAA4E,MAA5E,EAAoF,GAApF,EAAyFA,OAAzF,CAAiG,MAAjG,EAAyG,GAAzG,EAA8GA,OAA9G,CAAsH,aAAtH,EAAqI,MAArI,CAAvD;AAEA;;;AACA,MAAMR,mBAAmB,GAAId,QAAD;AAAA;;AAAA,SAAc,qBAAAA,QAAQ,CAACkB,MAAT,+FAAiBA,MAAjB,gFAAyBK,IAAzB,MAAkC,QAAlC,IAA8CvB,QAAQ,CAACkB,MAAT,CAAgBA,MAAhB,CAAuBP,KAAvB,KAAiC,MAA7F;AAAA,CAA5B;;;;"}