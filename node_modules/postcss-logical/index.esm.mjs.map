{"version":3,"file":"index.esm.mjs","sources":["src/lib/clone-rule.js","src/lib/transform-border.js","src/lib/transform-border-radius.js","src/lib/reduce-values.js","src/lib/transform-directional-shorthands.js","src/lib/transform-float.js","src/lib/transform-inset.js","src/lib/transform-resize.js","src/lib/match-side.js","src/lib/match-inset-prefix.js","src/lib/clone-decl.js","src/lib/transform-side.js","src/lib/match-size.js","src/lib/transform-size.js","src/lib/transform-text-align.js","src/lib/split.js","src/lib/transform-transition.js","src/index.js"],"sourcesContent":["import postcss from 'postcss';\n\nexport default (decl, dir) => {\n\tconst rule = Object(decl.parent).type === 'rule' ? decl.parent.cloneBefore({\n\t\traws: {}\n\t}).removeAll() : postcss.rule({ selector: '&' });\n\n\trule.assign({'selectors': rule.selectors.map(selector => `${selector}:dir(${dir})`)})\n\n\treturn rule;\n};\n","import cloneRule from './clone-rule';\n\nconst matchLogicalBorderSide = /^border-(block|block-start|block-end|inline|inline-start|inline-end)(-(width|style|color))?$/i;\n\nexport default {\n\t// border-block\n\t'border-block': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({\n\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\tvalue: values[0]\n\t\t});\n\t\tdecl.cloneBefore({\n\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\tvalue: values[1] || values[0]\n\t\t});\n\t\tclean(decl, preserve);\n\t},\n\n\t// border-block-start\n\t'border-block-start': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({\n\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t});\n\t\tclean(decl, preserve);\n\t},\n\n\t// border-block-end\n\t'border-block-end': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({\n\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t});\n\t\tclean(decl, preserve);\n\t},\n\n\t// border-inline\n\t'border-inline': (decl, values, dir, preserve) => {\n\t\tconst ltrDecls = () => {\n\t\t\treturn [\n\t\t\t\tdecl.cloneBefore({\n\t\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\t\tvalue: values[0]\n\t\t\t\t}),\n\t\t\t\tdecl.cloneBefore({\n\t\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\t\tvalue: values[1] || values[0]\n\t\t\t\t})\n\t\t\t];\n\t\t};\n\n\t\tconst rtlDecls = () => {\n\t\t\treturn [\n\t\t\t\tdecl.clone({\n\t\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\t\tvalue: values[0]\n\t\t\t\t}),\n\t\t\t\tdecl.clone({\n\t\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\t\tvalue: values[1] || values[0]\n\t\t\t\t})\n\t\t\t];\n\t\t};\n\n\t\tconst isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n\t\tif (isLTR || dir === 'ltr') {\n\t\t\tltrDecls();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecls();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t},\n\n\t// border-inline-start\n\t'border-inline-start': (decl, values, dir, preserve) => {\n\t\tconst ltrDecl = () => {\n\t\t\treturn decl.cloneBefore({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t\t});\n\t\t};\n\n\t\tconst rtlDecl = () => {\n\t\t\treturn decl.cloneBefore({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t\t});\n\t\t};\n\n\t\tif (dir === 'ltr') {\n\t\t\tltrDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t},\n\n\t// border-inline-end\n\t'border-inline-end': (decl, values, dir, preserve) => {\n\t\tconst ltrDecl = () => {\n\t\t\treturn decl.cloneBefore({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t\t});\n\t\t};\n\n\t\tconst rtlDecl = () => {\n\t\t\treturn decl.cloneBefore({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t\t});\n\t\t};\n\n\t\tif (dir === 'ltr') {\n\t\t\tltrDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t}\n};\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","import cloneRule from './clone-rule';\n\nconst logicalRadii = /^(border-)(end-end|end-start|start-end|start-start)(-radius)$/i;\nconst ltrRadii = { 'end-end': 'bottom-right', 'end-start': 'bottom-left', 'start-end': 'top-right', 'start-start': 'top-left' };\nconst rtlRadii = { 'end-end': 'bottom-left', 'end-start': 'bottom-right', 'start-end': 'top-left', 'start-start': 'top-right' };\n\nexport default (decl, values, dir, preserve) => {\n\tif (dir === 'ltr') {\n\t\tlDecl(decl);\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\tif (dir === 'rtl') {\n\t\trDecl(decl);\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\tcloneRule(decl, 'ltr').append(lDecl(decl));\n\tcloneRule(decl, 'rtl').append(rDecl(decl));\n\tclean(decl, preserve);\n};\n\nfunction lDecl(decl) {\n\treturn decl.cloneBefore({\n\t\tprop: decl.prop.replace(logicalRadii, ($, prefix, direction, suffix) => `${prefix}${ltrRadii[direction]}${suffix}`)\n\t});\n}\n\nfunction rDecl(decl) {\n\treturn decl.cloneBefore({\n\t\tprop: decl.prop.replace(logicalRadii, ($, prefix, direction, suffix) => `${prefix}${rtlRadii[direction]}${suffix}`)\n\t});\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export default values => {\n\tconst reducedValues = values.slice();\n\n\t// reduce [A, B, C, B] to [A, B, C]\n\tif (reducedValues.length === 4 && reducedValues[3] === reducedValues[1]) {\n\t\treducedValues.pop();\n\t}\n\n\t// reduce [A, B, A] to [A, B]\n\tif (reducedValues.length === 3 && reducedValues[2] === reducedValues[0]) {\n\t\treducedValues.pop();\n\t}\n\n\t// reduce [A, A] to [A]\n\tif (reducedValues.length === 2 && reducedValues[1] === reducedValues[0]) {\n\t\treducedValues.pop();\n\t}\n\n\treturn reducedValues;\n};\n","import cloneRule from './clone-rule';\nimport reduceValues from './reduce-values';\n\nexport default (decl, values, dir, preserve) => {\n\tif ('logical' !== values[0]) {\n\t\treturn null;\n\t}\n\n\t// get logical directions as all, inline, block-end, then inline-end\n\tconst [, all, inline, blockEnd, inlineEnd ] = values;\n\n\t// get left-to-right relative directions from logical directions as:\n\t// → top from all\n\t// → right from inline-end, inline, or all\n\t// → bottom from block-end, block, or all\n\t// → left from inline, or all\n\tconst ltrValues = reduceValues([\n\t\tall,\n\t\tinlineEnd || inline || all,\n\t\tblockEnd || all,\n\t\tinline || all\n\t]);\n\n\tconst ltrDecl = () => {\n\t\treturn decl.cloneBefore({\n\t\t\tvalue: ltrValues.join(' ')\n\t\t});\n\t};\n\n\t// return the ltr values if the values are flow agnostic (where no second inline value was needed)\n\tconst isFlowAgnostic = ltrValues.length < 4;\n\n\tif (isFlowAgnostic || dir === 'ltr') {\n\t\tltrDecl();\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\t// get right-to-left relative directions from logical directions as:\n\t// → top from all\n\t// → right from inline, or all\n\t// → bottom from block-end, block, or all\n\t// → left from inline-end, inline, or all\n\tconst rtlValues = reduceValues([\n\t\tall,\n\t\tinline || all,\n\t\tblockEnd || all,\n\t\tinlineEnd || inline || all\n\t]);\n\n\tconst rtlDecl = () => {\n\t\treturn decl.cloneBefore({\n\t\t\tvalue: rtlValues.join(' ')\n\t\t});\n\t};\n\n\tif (dir === 'rtl') {\n\t\trtlDecl();\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\tcloneRule(decl, 'ltr').append(ltrDecl());\n\tcloneRule(decl, 'rtl').append(rtlDecl());\n\tclean(decl, preserve);\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","import cloneRule from './clone-rule';\n\nexport default (decl, values, dir, preserve) => {\n\tif (/^inline-start$/i.test(decl.value)) {\n\t\tif (dir === 'ltr') {\n\t\t\tlDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(lDecl(decl));\n\t\t\tcloneRule(decl, 'rtl').append(rDecl(decl));\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t} if (/^inline-end$/i.test(decl.value)) {\n\t\tif (dir === 'ltr') {\n\t\t\trDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\tlDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(rDecl(decl));\n\t\t\tcloneRule(decl, 'rtl').append(lDecl(decl));\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t}\n};\n\nfunction lDecl(decl) {\n\treturn decl.cloneBefore({ value: 'left' });\n}\n\nfunction rDecl(decl) {\n\treturn decl.cloneBefore({ value: 'right' });\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","import cloneRule from './clone-rule';\n\nexport default (decl, values, dir, preserve) => {\n\tif ('logical' !== values[0]) {\n\t\tdecl.cloneBefore({ prop: 'top', value: values[0] });\n\t\tdecl.cloneBefore({ prop: 'right', value: values[1] || values[0] });\n\t\tdecl.cloneBefore({ prop: 'bottom', value: values[2] || values[0] });\n\t\tdecl.cloneBefore({ prop: 'left', value: values[3] || values[1] || values[0] });\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n\n\tconst isLTR = !values[4] || values[4] === values[2];\n\n\tif (isLTR || dir === 'ltr') {\n\t\tlDecl(decl, values);\n\t\tclean(decl, preserve);\n\t\treturn;\n\t} else if (dir === 'rtl') {\n\t\trDecl(decl, values);\n\t\tclean(decl, preserve);\n\t\treturn;\n\t} else {\n\t\tcloneRule(decl, 'ltr').append(lDecl(decl, values));\n\t\tcloneRule(decl, 'rtl').append(rDecl(decl, values));\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n}\n\nfunction lDecl(decl, values) {\n\treturn [\n\t\tdecl.cloneBefore({ prop: 'top', value: values[1] }),\n\t\tdecl.cloneBefore({ prop: 'left', value: values[2] || values[1] }),\n\t\tdecl.cloneBefore({ prop: 'bottom', value: values[3] || values[1] }),\n\t\tdecl.cloneBefore({ prop: 'right', value: values[4] || values[2] || values[1] })\n\t];\n}\n\nfunction rDecl(decl, values) {\n\treturn [\n\t\tdecl.cloneBefore({ prop: 'top', value: values[1] }),\n\t\tdecl.cloneBefore({ prop: 'right', value: values[2] || values[1] }),\n\t\tdecl.cloneBefore({ prop: 'bottom', value: values[3] || values[1] }),\n\t\tdecl.cloneBefore({ prop: 'left', value: values[4] || values[2] || values[1] })\n\t];\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export default (decl, values, dir, preserve) => {\n\tif (/^block$/i.test(decl.value)) {\n\t\tdecl.cloneBefore({ value: 'vertical' });\n\t\tclean(decl, preserve);\n\t\treturn;\n\t} else if (/^inline$/i.test(decl.value)) {\n\t\tdecl.cloneBefore({ value: 'horizontal' });\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export default /^(inset|margin|padding)(?:-(block|block-start|block-end|inline|inline-start|inline-end|start|end))$/i;\n","export default /^inset-/i;\n","import matchSide from './match-side';\nimport matchInsetPrefix from './match-inset-prefix';\n\nexport default (decl, suffix, value) => decl.cloneBefore({\n\tprop: `${decl.prop.replace(matchSide, '$1')}${suffix}`.replace(matchInsetPrefix, ''),\n\tvalue\n});\n","import cloneDeclBefore from './clone-decl';\nimport cloneRule from './clone-rule';\nimport matchSide from './match-side';\n\nimport matchInsetPrefix from './match-inset-prefix';\n\nexport default {\n\t// inset-block, margin-block, padding-block\n\t'block': (decl, values, dir, preserve) => {\n\t\tcloneDeclBefore(decl, '-top', values[0]);\n\t\tcloneDeclBefore(decl, '-bottom', values[1] || values[0]);\n\t\tclean(decl, preserve);\n\t},\n\n\t// inset-block-start, margin-block-start, padding-block-start\n\t'block-start': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({ prop: decl.prop.replace(matchSide, '$1-top').replace(matchInsetPrefix, '') });\n\t\tclean(decl, preserve);\n\t},\n\n\t// inset-block-end, margin-block-end, padding-block-end\n\t'block-end': (decl, values, dir, preserve) => {\n\t\tdecl.cloneBefore({ prop: decl.prop.replace(matchSide, '$1-bottom').replace(matchInsetPrefix, '') });\n\t\tclean(decl, preserve);\n\t},\n\n\t// inset-inline, margin-inline, padding-inline\n\t'inline': (decl, values, dir, preserve) => {\n\t\tconst ltrDecls = () => {\n\t\t\treturn [\n\t\t\t\tcloneDeclBefore(decl, '-left', values[0]),\n\t\t\t\tcloneDeclBefore(decl, '-right', values[1] || values[0])\n\t\t\t];\n\t\t};\n\n\t\tconst rtlDecls = () => {\n\t\t\treturn [\n\t\t\t\tcloneDeclBefore(decl, '-right', values[0]),\n\t\t\t\tcloneDeclBefore(decl, '-left', values[1] || values[0])\n\t\t\t];\n\t\t};\n\n\t\tconst isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n\t\tif (isLTR || dir === 'ltr') {\n\t\t\tltrDecls();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecls();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t},\n\n\t// inset-inline-start, margin-inline-start, padding-inline-start\n\t'inline-start': (decl, values, dir, preserve) => {\n\t\tconst ltrDecl = () => {\n\t\t\treturn cloneDeclBefore(decl, '-left', decl.value);\n\t\t};\n\t\tconst rtlDecl = () => {\n\t\t\treturn cloneDeclBefore(decl, '-right', decl.value);\n\t\t};\n\n\t\tif (dir === 'ltr') {\n\t\t\tltrDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t},\n\n\t// inset-inline-end, margin-inline-end, padding-inline-end\n\t'inline-end': (decl, values, dir, preserve) => {\n\t\tconst ltrDecl = () => {\n\t\t\treturn cloneDeclBefore(decl, '-right', decl.value);\n\t\t};\n\t\tconst rtlDecl = () => {\n\t\t\treturn cloneDeclBefore(decl, '-left', decl.value);\n\t\t};\n\n\t\tif (dir === 'ltr') {\n\t\t\tltrDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trtlDecl();\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl());\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl());\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export default /^(min-|max-)?(block|inline)-(size)$/i;\n","import matchSize from './match-size';\n\nexport default (decl, values, dir, preserve) => {\n\tdecl.cloneBefore({\n\t\tprop: decl.prop.replace(\n\t\t\tmatchSize,\n\t\t\t($0, minmax, flow) => `${minmax || ''}${'block' === flow ? 'height' : 'width'}`\n\t\t)\n\t});\n\n\tif (!preserve) {\n\t\tdecl.remove();\n\t}\n}\n","import cloneRule from './clone-rule';\n\nexport default (decl, values, dir, preserve) => {\n\tif (/^start$/i.test(decl.value)) {\n\t\tif (dir === 'ltr') {\n\t\t\tlDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\trDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(lDecl(decl));\n\t\t\tcloneRule(decl, 'rtl').append(rDecl(decl));\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t} else if (/^end$/i.test(decl.value)) {\n\t\tif (dir === 'ltr') {\n\t\t\trDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else if (dir === 'rtl') {\n\t\t\tlDecl(decl);\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcloneRule(decl, 'ltr').append(rDecl(decl));\n\t\t\tcloneRule(decl, 'rtl').append(lDecl(decl));\n\t\t\tclean(decl, preserve);\n\t\t\treturn;\n\t\t}\n\t}\n};\n\nfunction lDecl(decl) {\n\treturn decl.cloneBefore({ value: 'left' });\n}\n\nfunction rDecl(decl) {\n\treturn decl.cloneBefore({ value: 'right' });\n}\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n","export function splitByComma(string, isTrimmed) {\n\treturn splitByRegExp(string, /^,$/, isTrimmed);\n}\n\nexport function splitBySpace(string, isTrimmed) {\n\treturn splitByRegExp(string, /^\\s$/, isTrimmed);\n}\n\nexport function splitBySlash(string, isTrimmed) {\n\treturn splitByRegExp(string, /^\\/$/, isTrimmed);\n}\n\nfunction splitByRegExp(string, re, isTrimmed) {\n\tconst array = [];\n\tlet buffer = '';\n\tlet split = false;\n\tlet func = 0;\n\tlet i = -1;\n\n\twhile (++i < string.length) {\n\t\tconst char = string[i];\n\n\t\tif (char === '(') {\n\t\t\tfunc += 1;\n\t\t} else if (char === ')') {\n\t\t\tif (func > 0) {\n\t\t\t\tfunc -= 1;\n\t\t\t}\n\t\t} else if (func === 0) {\n\t\t\tif (re.test(char)) {\n\t\t\t\tsplit = true;\n\t\t\t}\n\t\t}\n\n\t\tif (split) {\n\t\t\tif (!isTrimmed || buffer.trim()) {\n\t\t\t\tarray.push(isTrimmed ? buffer.trim() : buffer);\n\t\t\t}\n\n\t\t\tif (!isTrimmed) {\n\t\t\t\tarray.push(char);\n\t\t\t}\n\n\t\t\tbuffer = '';\n\t\t\tsplit = false;\n\t\t} else {\n\t\t\tbuffer += char\n\t\t}\n\t}\n\n\tif (buffer !== '') {\n\t\tarray.push(isTrimmed ? buffer.trim() : buffer);\n\t}\n\n\treturn array;\n}\n","import cloneRule from './clone-rule';\nimport { splitByComma, splitBySpace } from './split';\n\nexport default (decl, notValues, dir, preserve) => {\n\tconst ltrValues = [];\n\tconst rtlValues = [];\n\n\tsplitByComma(decl.value).forEach(value => {\n\t\tlet hasBeenSplit = false;\n\n\t\tsplitBySpace(value).forEach((word, index, words) => {\n\t\t\tif (word in valueMap) {\n\t\t\t\thasBeenSplit = true;\n\n\t\t\t\tvalueMap[word].ltr.forEach(replacement => {\n\t\t\t\t\tconst clone = words.slice();\n\n\t\t\t\t\tclone.splice(index, 1, replacement);\n\n\t\t\t\t\tif (ltrValues.length && !/^,$/.test(ltrValues[ltrValues.length - 1])) {\n\t\t\t\t\t\tltrValues.push(',');\n\t\t\t\t\t}\n\n\t\t\t\t\tltrValues.push(clone.join(''));\n\t\t\t\t});\n\n\t\t\t\tvalueMap[word].rtl.forEach(replacement => {\n\t\t\t\t\tconst clone = words.slice();\n\n\t\t\t\t\tclone.splice(index, 1, replacement);\n\n\t\t\t\t\tif (rtlValues.length && !/^,$/.test(rtlValues[rtlValues.length - 1])) {\n\t\t\t\t\t\trtlValues.push(',');\n\t\t\t\t\t}\n\n\t\t\t\t\trtlValues.push(clone.join(''));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (!hasBeenSplit) {\n\t\t\tltrValues.push(value);\n\t\t\trtlValues.push(value);\n\t\t}\n\t});\n\n\tif (ltrValues.length && dir === 'ltr') {\n\t\tif (preserve) {\n\t\t\tdecl.cloneBefore({});\n\t\t}\n\t\tdecl.assign({ value: ltrValues.join('') });\n\t\treturn;\n\t} else if (rtlValues.length && dir === 'rtl') {\n\t\tif (preserve) {\n\t\t\tdecl.cloneBefore({});\n\t\t}\n\t\tdecl.assign({ value: rtlValues.join('') });\n\t\treturn;\n\t} else if (ltrValues.join('') !== rtlValues.join('')) {\n\n\t\tcloneRule(decl, 'ltr').append(decl.cloneBefore({ value: ltrValues.join('') }));\n\t\tcloneRule(decl, 'rtl').append(decl.cloneBefore({ value: rtlValues.join('') }));\n\t\tclean(decl, preserve);\n\t\treturn;\n\t}\n};\n\nfunction clean(decl, preserve) {\n\tif (!preserve) decl.remove();\n}\n\nconst valueMap = {\n\t// Logical Height and Logical Width\n\t'block-size': { ltr: ['height'], rtl: ['height'] },\n\t'inline-size': { ltr: ['width'], rtl: ['width'] },\n\n\t// Flow-relative Margins\n\t'margin-block-end': { ltr: ['margin-bottom'], rtl: ['margin-bottom'] },\n\t'margin-block-start': { ltr: ['margin-top'], rtl: ['margin-top'] },\n\t'margin-block': { ltr: ['margin-top', 'margin-bottom'], rtl: ['margin-top', 'margin-bottom'] },\n\t'margin-inline-end': { ltr: ['margin-right'], rtl: ['margin-left'] },\n\t'margin-inline-start': { ltr: ['margin-left'], rtl: ['margin-right'] },\n\t'margin-inline': { ltr: ['margin-left', 'margin-right'], rtl: ['margin-left', 'margin-right'] },\n\n\t// Flow-relative Offsets\n\t'inset-block-end': { ltr: ['bottom'], rtl: ['bottom'] },\n\t'inset-block-start': { ltr: ['top'], rtl: ['top'] },\n\t'inset-block': { ltr: ['top', 'bottom'], rtl: ['top', 'bottom'] },\n\t'inset-inline-end': { ltr: ['right'], rtl: ['left'] },\n\t'inset-inline-start': { ltr: ['left'], rtl: ['right'] },\n\t'inset-inline': { ltr: ['left', 'right'], rtl: ['left', 'right'] },\n\t'inset': { ltr: ['top', 'right', 'bottom', 'left'], rtl: ['top', 'right', 'bottom', 'left'] },\n\n\t// Flow-relative Padding\n\t'padding-block-end': { ltr: ['padding-bottom'], rtl: ['padding-bottom'] },\n\t'padding-block-start': { ltr: ['padding-top'], rtl: ['padding-top'] },\n\t'padding-block': { ltr: ['padding-top', 'padding-bottom'], rtl: ['padding-top', 'padding-bottom'] },\n\t'padding-inline-end': { ltr: ['padding-right'], rtl: ['padding-left'] },\n\t'padding-inline-start': { ltr: ['padding-left'], rtl: ['padding-right'] },\n\t'padding-inline': { ltr: ['padding-left', 'padding-right'], rtl: ['padding-left', 'padding-right'] },\n\n\t// Flow-relative Borders\n\t'border-block-color': { ltr: ['border-top-color', 'border-bottom-color'], rtl: ['border-top-color', 'border-bottom-color'] },\n\t'border-block-end-color': { ltr: ['border-bottom-color'], rtl: ['border-bottom-color'] },\n\t'border-block-end-style': { ltr: ['border-bottom-style'], rtl: ['border-bottom-style'] },\n\t'border-block-end-width': { ltr: ['border-bottom-width'], rtl: ['border-bottom-width'] },\n\t'border-block-end': { ltr: ['border-bottom'], rtl: ['border-bottom'] },\n\t'border-block-start-color': { ltr: ['border-top-color'], rtl: ['border-top-color'] },\n\t'border-block-start-style': { ltr: ['border-top-style'], rtl: ['border-top-style'] },\n\t'border-block-start-width': { ltr: ['border-top-width'], rtl: ['border-top-width'] },\n\t'border-block-start': { ltr: ['border-top'], rtl: ['border-top'] },\n\t'border-block-style': { ltr: ['border-top-style', 'border-bottom-style'], rtl: ['border-top-style', 'border-bottom-style'] },\n\t'border-block-width': { ltr: ['border-top-width', 'border-bottom-width'], rtl: ['border-top-width', 'border-bottom-width'] },\n\t'border-block': { ltr: ['border-top', 'border-bottom'], rtl: ['border-top', 'border-bottom'] },\n\t'border-inline-color': { ltr: ['border-left-color', 'border-right-color'], rtl: ['border-left-color', 'border-right-color'] },\n\t'border-inline-end-color': { ltr: ['border-right-color'], rtl: ['border-left-color'] },\n\t'border-inline-end-style': { ltr: ['border-right-style'], rtl: ['border-left-style'] },\n\t'border-inline-end-width': { ltr: ['border-right-width'], rtl: ['border-left-width'] },\n\t'border-inline-end': { ltr: ['border-right'], rtl: ['border-left'] },\n\t'border-inline-start-color': { ltr: ['border-left-color'], rtl: ['border-right-color'] },\n\t'border-inline-start-style': { ltr: ['border-left-style'], rtl: ['border-right-style'] },\n\t'border-inline-start-width': { ltr: ['border-left-width'], rtl: ['border-right-width'] },\n\t'border-inline-start': { ltr: ['border-left'], rtl: ['border-right'] },\n\t'border-inline-style': { ltr: ['border-left-style', 'border-right-style'], rtl: ['border-left-style', 'border-right-style'] },\n\t'border-inline-width': { ltr: ['border-left-width', 'border-right-width'], rtl: ['border-left-width', 'border-right-width'] },\n\t'border-inline': { ltr: ['border-left', 'border-right'], rtl: ['border-left', 'border-right'] },\n\n\t// Flow-relative Corner Rounding\n\t'border-end-end-radius': { ltr: ['border-bottom-right-radius'], rtl: ['border-bottom-left-radius'] },\n\t'border-end-start-radius': { ltr: ['border-bottom-left-radius'], rtl: ['border-bottom-right-radius'] },\n\t'border-start-end-radius': { ltr: ['border-top-right-radius'], rtl: ['border-top-left-radius'] },\n\t'border-start-start-radius': { ltr: ['border-top-left-radius'], rtl: ['border-top-right-radius'] }\n};\n","import transformBorder from './lib/transform-border';\nimport transformBorderRadius from './lib/transform-border-radius';\nimport transformDirectionalShorthands from './lib/transform-directional-shorthands';\nimport transformFloat from './lib/transform-float';\nimport transformInset from './lib/transform-inset';\nimport transformResize from './lib/transform-resize';\nimport transformSide from './lib/transform-side';\nimport transformSize from './lib/transform-size';\nimport transformTextAlign from './lib/transform-text-align';\nimport transformTransition from './lib/transform-transition';\nimport { splitBySpace } from './lib/split';\n\n// plugin\nfunction postcssLogicalProperties(opts) {\n\topts = Object(opts);\n\n\tconst preserve = Boolean(opts.preserve);\n\tconst dir = !preserve && typeof opts.dir === 'string'\n\t\t? /^rtl$/i.test(opts.dir)\n\t\t\t? 'rtl'\n\t\t\t: 'ltr'\n\t\t: false;\n\n\tconst makeTransform = (transform) => {\n\t\treturn (decl) => {\n\t\t\tconst parent = decl.parent;\n\t\t\tconst values = splitBySpace(decl.value, true);\n\t\t\ttransform(decl, values, dir, preserve);\n\t\t\tif (!parent.nodes.length) {\n\t\t\t\tparent.remove();\n\t\t\t}\n\t\t}\n\t}\n\n\tconst makeTransformWithoutSplittingValues = (transform) => {\n\t\treturn (decl) => {\n\t\t\tconst parent = decl.parent;\n\t\t\tconst values = [decl.value];\n\t\t\ttransform(decl, values, dir, preserve);\n\t\t\tif (!parent.nodes.length) {\n\t\t\t\tparent.remove();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tpostcssPlugin: 'postcss-logical-properties',\n\t\tDeclaration: {\n\t\t\t// Flow-Relative Values\n\t\t\t'clear': makeTransform(transformFloat),\n\t\t\t'float': makeTransform(transformFloat),\n\t\t\t'resize': makeTransform(transformResize),\n\t\t\t'text-align': makeTransform(transformTextAlign),\n\n\t\t\t// Logical Height and Logical Width\n\t\t\t'block-size': makeTransform(transformSize),\n\t\t\t'max-block-size': makeTransform(transformSize),\n\t\t\t'min-block-size': makeTransform(transformSize),\n\t\t\t'inline-size': makeTransform(transformSize),\n\t\t\t'max-inline-size': makeTransform(transformSize),\n\t\t\t'min-inline-size': makeTransform(transformSize),\n\n\t\t\t// Flow-relative Margins\n\t\t\t'margin': makeTransform(transformDirectionalShorthands),\n\t\t\t'margin-inline': makeTransform(transformSide['inline']),\n\t\t\t'margin-inline-end': makeTransform(transformSide['inline-end']),\n\t\t\t'margin-inline-start': makeTransform(transformSide['inline-start']),\n\t\t\t'margin-block': makeTransform(transformSide['block']),\n\t\t\t'margin-block-end': makeTransform(transformSide['block-end']),\n\t\t\t'margin-block-start': makeTransform(transformSide['block-start']),\n\n\t\t\t// Flow-relative Offsets\n\t\t\t'inset': makeTransform(transformInset),\n\t\t\t'inset-inline': makeTransform(transformSide['inline']),\n\t\t\t'inset-inline-end': makeTransform(transformSide['inline-end']),\n\t\t\t'inset-inline-start': makeTransform(transformSide['inline-start']),\n\t\t\t'inset-block': makeTransform(transformSide['block']),\n\t\t\t'inset-block-end': makeTransform(transformSide['block-end']),\n\t\t\t'inset-block-start': makeTransform(transformSide['block-start']),\n\n\t\t\t// Flow-relative Padding\n\t\t\t'padding': makeTransform(transformDirectionalShorthands),\n\t\t\t'padding-inline': makeTransform(transformSide['inline']),\n\t\t\t'padding-inline-end': makeTransform(transformSide['inline-end']),\n\t\t\t'padding-inline-start': makeTransform(transformSide['inline-start']),\n\t\t\t'padding-block': makeTransform(transformSide['block']),\n\t\t\t'padding-block-end': makeTransform(transformSide['block-end']),\n\t\t\t'padding-block-start': makeTransform(transformSide['block-start']),\n\n\t\t\t// Flow-relative Borders\n\t\t\t'border-block': makeTransformWithoutSplittingValues(transformBorder['border-block']),\n\t\t\t'border-block-color': makeTransform(transformBorder['border-block']),\n\t\t\t'border-block-style': makeTransform(transformBorder['border-block']),\n\t\t\t'border-block-width': makeTransform(transformBorder['border-block']),\n\t\t\t'border-block-end': makeTransformWithoutSplittingValues(transformBorder['border-block-end']),\n\t\t\t'border-block-end-color': makeTransform(transformBorder['border-block-end']),\n\t\t\t'border-block-end-style': makeTransform(transformBorder['border-block-end']),\n\t\t\t'border-block-end-width': makeTransform(transformBorder['border-block-end']),\n\t\t\t'border-block-start': makeTransformWithoutSplittingValues(transformBorder['border-block-start']),\n\t\t\t'border-block-start-color': makeTransform(transformBorder['border-block-start']),\n\t\t\t'border-block-start-style': makeTransform(transformBorder['border-block-start']),\n\t\t\t'border-block-start-width': makeTransform(transformBorder['border-block-start']),\n\t\t\t'border-inline': makeTransformWithoutSplittingValues(transformBorder['border-inline']),\n\t\t\t'border-inline-color': makeTransform(transformBorder['border-inline']),\n\t\t\t'border-inline-style': makeTransform(transformBorder['border-inline']),\n\t\t\t'border-inline-width': makeTransform(transformBorder['border-inline']),\n\t\t\t'border-inline-end': makeTransformWithoutSplittingValues(transformBorder['border-inline-end']),\n\t\t\t'border-inline-end-color': makeTransform(transformBorder['border-inline-end']),\n\t\t\t'border-inline-end-style': makeTransform(transformBorder['border-inline-end']),\n\t\t\t'border-inline-end-width': makeTransform(transformBorder['border-inline-end']),\n\t\t\t'border-inline-start': makeTransformWithoutSplittingValues(transformBorder['border-inline-start']),\n\t\t\t'border-inline-start-color': makeTransform(transformBorder['border-inline-start']),\n\t\t\t'border-inline-start-style': makeTransform(transformBorder['border-inline-start']),\n\t\t\t'border-inline-start-width': makeTransform(transformBorder['border-inline-start']),\n\n\t\t\t// Flow-relative Corner Rounding\n\t\t\t'border-end-end-radius': makeTransform(transformBorderRadius),\n\t\t\t'border-end-start-radius': makeTransform(transformBorderRadius),\n\t\t\t'border-start-end-radius': makeTransform(transformBorderRadius),\n\t\t\t'border-start-start-radius': makeTransform(transformBorderRadius),\n\n\t\t\t// Four-Directional Shorthand Border Properties\n\t\t\t'border-color': makeTransform(transformDirectionalShorthands),\n\t\t\t'border-style': makeTransform(transformDirectionalShorthands),\n\t\t\t'border-width': makeTransform(transformDirectionalShorthands),\n\n\t\t\t// Transition helpers\n\t\t\t'transition': makeTransform(transformTransition),\n\t\t\t'transition-property': makeTransform(transformTransition)\n\t\t}\n\t};\n}\npostcssLogicalProperties.postcss = true;\n\nexport default postcssLogicalProperties;\n"],"names":["decl","dir","rule","Object","parent","type","cloneBefore","raws","removeAll","postcss","selector","assign","selectors","map","matchLogicalBorderSide","values","preserve","prop","replace","value","clean","ltrDecls","rtlDecls","clone","isLTR","length","cloneRule","append","ltrDecl","rtlDecl","remove","logicalRadii","ltrRadii","rtlRadii","lDecl","rDecl","$","prefix","direction","suffix","reducedValues","slice","pop","all","inline","blockEnd","inlineEnd","ltrValues","reduceValues","join","isFlowAgnostic","rtlValues","test","matchSide","matchInsetPrefix","cloneDeclBefore","matchSize","$0","minmax","flow","splitByComma","string","isTrimmed","splitByRegExp","splitBySpace","re","array","buffer","split","func","i","char","trim","push","notValues","forEach","hasBeenSplit","word","index","words","valueMap","ltr","replacement","splice","rtl","postcssLogicalProperties","opts","Boolean","makeTransform","transform","nodes","makeTransformWithoutSplittingValues","postcssPlugin","Declaration","transformFloat","transformResize","transformTextAlign","transformSize","transformDirectionalShorthands","transformSide","transformInset","transformBorder","transformBorderRadius","transformTransition"],"mappings":"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"}