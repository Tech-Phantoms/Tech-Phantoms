{"version":3,"file":"index.cjs.js","sources":["../src/onCSSFunction.js","../src/options.js","../src/onCSSDeclaration.js","../src/index.js"],"sourcesContent":["import { lab2rgb, lch2rgb } from '@csstools/convert-colors'\nimport { parse } from 'postcss-values-parser'\n\n/** @type {(decl: CSSFunction) => void} Transform lab() and lch() functions. */\nconst onCSSFunction = node => {\n\t/** @type {{ name: string, nodes: CSSNode[] }} */\n\tconst { name, nodes } = node\n\n\tif (isColorFunctionName(name)) {\n\t\tif (isLabFunctionContents(nodes) || isLchFunctionContents(nodes)) {\n\t\t\t// rename the Color function to `rgb`\n\t\t\tObject.assign(node, { name: 'rgb' })\n\n\t\t\t/** @type {CSSPunctuation} Slash punctuation before the Alpha channel. */\n\t\t\tconst slashNode = nodes[3]\n\n\t\t\t/** @type {CSSNumber} Alpha channel. */\n\t\t\tconst alphaNode = nodes[4]\n\n\t\t\tif (alphaNode) {\n\t\t\t\tif (isPercentage(alphaNode) && !isCalc(alphaNode)) {\n\t\t\t\t\t// transform the Alpha channel from a Percentage to (0-1) Number\n\t\t\t\t\tObject.assign(alphaNode, { value: String(alphaNode.value / 100), unit: '' })\n\t\t\t\t}\n\n\t\t\t\t// if the color is fully opaque (i.e. the Alpha channel is `1`)\n\t\t\t\tif (alphaNode.value === '1') {\n\t\t\t\t\t// remove the Slash and Alpha channel\n\t\t\t\t\tslashNode.remove()\n\t\t\t\t\talphaNode.remove()\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise, rename the Color function to `rgba`\n\t\t\t\t\tObject.assign(node, { name: 'rgba' })\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// replace a remaining Slash with a Comma\n\t\t\tif (slashNode && isSlash(slashNode)) {\n\t\t\t\tslashNode.replaceWith(commaNode.clone())\n\t\t\t}\n\n\t\t\t/** Extracted Color channels. */\n\t\t\tconst [channelNode1, channelNode2, channelNode3] = nodes\n\n\t\t\t/** Corresponding Color transformer. */\n\t\t\tconst toRGB = isLabColorFunctionName(name) ? lab2rgb : lch2rgb\n\n\t\t\t/** RGB channels from the source color. */\n\t\t\tconst rgbValues = toRGB(\n\t\t\t\t...[\n\t\t\t\t\tchannelNode1.value,\n\t\t\t\t\tchannelNode2.value,\n\t\t\t\t\tchannelNode3.value\n\t\t\t\t].map(\n\t\t\t\t\tchannelNumber => parseFloat(channelNumber)\n\t\t\t\t)\n\t\t\t).map(\n\t\t\t\tchannelValue => Math.max(Math.min(parseInt(channelValue * 2.55), 255), 0)\n\t\t\t)\n\n\t\t\tchannelNode3.replaceWith(\n\t\t\t\tchannelNode3.clone({ value: String(rgbValues[2]) })\n\t\t\t)\n\n\t\t\tchannelNode2.replaceWith(\n\t\t\t\tchannelNode2.clone({ value: String(rgbValues[1]) }),\n\t\t\t\tcommaNode.clone()\n\t\t\t)\n\n\t\t\tchannelNode1.replaceWith(\n\t\t\t\tchannelNode1.clone({ value: String(rgbValues[0]), unit: '' }),\n\t\t\t\tcommaNode.clone()\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default onCSSFunction\n\nconst commaNode = parse(',').first\n\n/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */\nconst createRegExpTest = Function.bind.bind(RegExp.prototype.test)\n\n/** Return whether the function name is `lab` or `lch`. */\nconst isColorFunctionName = createRegExpTest(/^(lab|lch)$/i)\n\n/** Return whether the function name is `calc`. */\nconst isCalcFunctionName = createRegExpTest(/^calc$/i)\n\n/** Return whether the function name is `lab`. */\nconst isLabColorFunctionName = createRegExpTest(/^lab$/i)\n\n/** Return whether the unit is alpha-like. */\nconst isAlphaLikeUnit = createRegExpTest(/^%?$/i)\n\n/** Return whether the unit is hue-like. */\nconst isHueLikeUnit = createRegExpTest(/^(deg|grad|rad|turn)?$/i)\n\n/** @type {(node: CSSFunction) => boolean} Return whether the node is an Alpha-like unit. */\nconst isAlphaValue = node => isCalc(node) || node.type === 'numeric' && isAlphaLikeUnit(node.unit)\n\n/** @type {(node: CSSFunction) => boolean} Return whether the node is a calc() function. */\nconst isCalc = node => node.type === 'func' && isCalcFunctionName(node.name)\n\n/** @type {(node: CSSNumber) => boolean} Return whether the node is a Hue-like unit. */\nconst isHue = node => isCalc(node) || node.type === 'numeric' && isHueLikeUnit(node.unit)\n\n/** @type {(node: CSSNumber) => boolean} Return whether the node is a Number unit. */\nconst isNumber = node => isCalc(node) || node.type === 'numeric' && node.unit === ''\n\n/** @type {(node: CSSNumber) => boolean} Return whether the node is a Percentage unit. */\nconst isPercentage = node => isCalc(node) || node.type === 'numeric' && node.unit === '%'\n\n/** @type {(node: CSSOperator) => boolean} Return whether the node is a Slash delimiter. */\nconst isSlash = node => node.type === 'operator' && node.value === '/'\n\n/** @type {(nodes: Node[]) => boolean} Return whether a set of nodes is a lab() function. */\nconst isLabFunctionContents = nodes => nodes.every(\n\t(node, index) => typeof labFunctionContents[index] === 'function' && labFunctionContents[index](node)\n)\n\n/** Set of nodes in a lab() function. */\nconst labFunctionContents = [isPercentage, isNumber, isNumber, isSlash, isAlphaValue]\n\n/** @type {(nodes: Node[]) => boolean} Return whether a set of nodes is a lch() function. */\nconst isLchFunctionContents = nodes => nodes.every(\n\t(node, index) => typeof lchFunctionContents[index] === 'function' && lchFunctionContents[index](node)\n)\n\n/** Set of nodes in a lch() function. */\nconst lchFunctionContents = [isPercentage, isNumber, isHue, isSlash, isAlphaValue]\n\n/** @typedef {import('postcss-values-parser').Func} CSSFunction */\n/** @typedef {import('postcss-values-parser').Node} CSSNode */\n/** @typedef {import('postcss-values-parser').Numeric} CSSNumber */\n/** @typedef {import('postcss-values-parser').Operator} CSSOperator */\n/** @typedef {import('postcss-values-parser').Punctuation} CSSPunctuation */\n","export default {\n\t/** Whether to preserve the original functional color declaration. */\n\tpreserve: false\n}\n","import { parse } from 'postcss-values-parser'\nimport onCSSFunction from './onCSSFunction'\nimport options from './options'\n\n/** @type {(decl: CSSDeclaration) => void} Transform lab() and lch() functions in CSS Declarations. */\nconst onCSSDeclaration = (decl, { result }) => {\n\tconst { value: originalValue } = decl\n\n\tif (hasAnyColorFunction(originalValue)) {\n\t\tlet valueAST\n\n\t\ttry {\n\t\t\tvalueAST = parse(originalValue, { ignoreUnknownWords: true })\n\t\t} catch (error) {\n\t\t\tdecl.warn(\n\t\t\t\tresult,\n\t\t\t\t`Failed to parse value '${originalValue}' as a lab or hcl function. Leaving the original value intact.`\n\t\t\t)\n\t\t}\n\n\t\tif (typeof valueAST === 'undefined') {\n\t\t\treturn\n\t\t}\n\n\t\tvalueAST.walkType('func', onCSSFunction)\n\n\t\tconst modifiedValue = String(valueAST)\n\n\t\tif (modifiedValue !== originalValue) {\n\t\t\tif (options.preserve) decl.cloneBefore({ value: modifiedValue })\n\t\t\telse decl.value = modifiedValue\n\t\t}\n\t}\n}\n\nexport default onCSSDeclaration\n\n/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */\nconst createRegExpTest = Function.bind.bind(RegExp.prototype.test)\n\n/** Return whether the value has a lab() or lch() function. */\nconst hasAnyColorFunction = createRegExpTest(/(^|[^\\w-])(lab|lch)\\(/i)\n\n/** @typedef {import('postcss').Declaration} CSSDeclaration */\n","import onCSSDeclaration from './onCSSDeclaration'\nimport options from './options'\n\n/** Transform lab() and lch() functions in CSS. */\nconst postcssPlugin = /** @type {PostCSSPluginInitializer} */ opts => {\n\toptions.preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false\n\n\treturn {\n\t\tpostcssPlugin: 'postcss-lab-function',\n\t\tDeclaration: onCSSDeclaration,\n\t}\n}\n\npostcssPlugin.postcss = true\n\nexport default postcssPlugin\n\n/** @typedef {import('postcss').Plugin} PostCSSPlugin */\n/** @typedef {(opts: options) => PostCSSPlugin} PostCSSPluginInitializer */\n"],"names":["onCSSFunction","node","name","nodes","isColorFunctionName","isLabFunctionContents","isLchFunctionContents","Object","assign","slashNode","alphaNode","isPercentage","isCalc","value","String","unit","remove","isSlash","replaceWith","commaNode","clone","channelNode1","channelNode2","channelNode3","toRGB","isLabColorFunctionName","lab2rgb","lch2rgb","rgbValues","map","channelNumber","parseFloat","channelValue","Math","max","min","parseInt","parse","first","createRegExpTest","Function","bind","RegExp","prototype","test","isCalcFunctionName","isAlphaLikeUnit","isHueLikeUnit","isAlphaValue","type","isHue","isNumber","every","index","labFunctionContents","lchFunctionContents","preserve","onCSSDeclaration","decl","result","originalValue","hasAnyColorFunction","valueAST","ignoreUnknownWords","error","warn","walkType","modifiedValue","options","cloneBefore","postcssPlugin","opts","Boolean","Declaration","postcss"],"mappings":"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"}