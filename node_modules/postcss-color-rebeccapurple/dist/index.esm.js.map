{"version":3,"file":"index.esm.js","sources":["../src/onCSSIdentifier.js","../src/options.js","../src/onCSSDeclaration.js","../src/index.js"],"sourcesContent":["/** @type {(decl: CSSIdentifier) => void} Transform the rebeccapurple keyword. */\nconst onCSSIdentifier = node => {\n\tif (isRebeccaPurple(node.value)) node.value = '#639'\n}\n\nexport default onCSSIdentifier\n\n/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */\nconst createRegExpTest = Function.bind.bind(RegExp.prototype.test)\n\n/** Return whether the value is rebeccapurple. */\nconst isRebeccaPurple = createRegExpTest(/^rebeccapurple$/i)\n","export default {\n\t/** Whether to preserve the original keyword. */\n\tpreserve: false\n}\n","import { parse } from 'postcss-values-parser'\nimport onCSSIdentifier from './onCSSIdentifier'\nimport options from './options'\n\n/** @type {(decl: CSSDeclaration) => void} Transform the rebeccapurple keyword in CSS Declarations. */\nconst onCSSDeclaration = decl => {\n\tconst { value: originalValue } = decl\n\n\tif (hasAnyRebeccapurple(originalValue)) {\n\t\tconst valueAST = parse(originalValue)\n\n\t\tvalueAST.walkType('word', onCSSIdentifier)\n\n\t\tconst modifiedValue = String(valueAST)\n\n\t\tif (modifiedValue !== originalValue) {\n\t\t\tif (options.preserve) decl.cloneBefore({ value: modifiedValue })\n\t\t\telse decl.value = modifiedValue\n\t\t}\n\t}\n}\n\nexport default onCSSDeclaration\n\n/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */\nconst createRegExpTest = Function.bind.bind(RegExp.prototype.test)\n\n/** Return whether the value has a rebeccapurple keyword. */\nconst hasAnyRebeccapurple = createRegExpTest(/(^|[^\\w-])rebeccapurple([^\\w-]|$)/i)\n\n/** @typedef {import('postcss').Declaration} CSSDeclaration */\n","import onCSSDeclaration from './onCSSDeclaration'\nimport options from './options'\n\n/** Transform the rebeccapurple keyword in CSS. */\nfunction postcssColorRebeccaPurple(opts) {\n\toptions.preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false\n\n\treturn {\n\t\tpostcssPlugin: 'postcss-color-rebeccapurple',\n\t\tDeclaration: onCSSDeclaration\n\t}\n}\n\npostcssColorRebeccaPurple.postcss = true\n\nexport default postcssColorRebeccaPurple\n"],"names":["onCSSIdentifier","node","isRebeccaPurple","value","createRegExpTest","Function","bind","RegExp","prototype","test","preserve","onCSSDeclaration","decl","originalValue","hasAnyRebeccapurple","valueAST","parse","walkType","modifiedValue","String","options","cloneBefore","postcssColorRebeccaPurple","opts","Object","Boolean","postcssPlugin","Declaration","postcss"],"mappings":";;AAAA;AACA,MAAMA,eAAe,GAAGC,IAAI,IAAI;AAC/B,MAAIC,eAAe,CAACD,IAAI,CAACE,KAAN,CAAnB,EAAiCF,IAAI,CAACE,KAAL,GAAa,MAAb;AACjC,CAFD;AAMA;;AACA,MAAMC,kBAAgB,GAAGC,QAAQ,CAACC,IAAT,CAAcA,IAAd,CAAmBC,MAAM,CAACC,SAAP,CAAiBC,IAApC,CAAzB;AAEA;;AACA,MAAMP,eAAe,GAAGE,kBAAgB,CAAC,kBAAD,CAAxC;;ACXA,cAAe;AACd;AACAM,EAAAA,QAAQ,EAAE;AAFI,CAAf;;ACIA;;AACA,MAAMC,gBAAgB,GAAGC,IAAI,IAAI;AAChC,QAAM;AAAET,IAAAA,KAAK,EAAEU;AAAT,MAA2BD,IAAjC;;AAEA,MAAIE,mBAAmB,CAACD,aAAD,CAAvB,EAAwC;AACvC,UAAME,QAAQ,GAAGC,KAAK,CAACH,aAAD,CAAtB;AAEAE,IAAAA,QAAQ,CAACE,QAAT,CAAkB,MAAlB,EAA0BjB,eAA1B;AAEA,UAAMkB,aAAa,GAAGC,MAAM,CAACJ,QAAD,CAA5B;;AAEA,QAAIG,aAAa,KAAKL,aAAtB,EAAqC;AACpC,UAAIO,OAAO,CAACV,QAAZ,EAAsBE,IAAI,CAACS,WAAL,CAAiB;AAAElB,QAAAA,KAAK,EAAEe;AAAT,OAAjB,EAAtB,KACKN,IAAI,CAACT,KAAL,GAAae,aAAb;AACL;AACD;AACD,CAfD;AAmBA;;AACA,MAAMd,gBAAgB,GAAGC,QAAQ,CAACC,IAAT,CAAcA,IAAd,CAAmBC,MAAM,CAACC,SAAP,CAAiBC,IAApC,CAAzB;AAEA;;AACA,MAAMK,mBAAmB,GAAGV,gBAAgB,CAAC,oCAAD,CAA5C;AAEA;;AC3BA;;AACA,SAASkB,yBAAT,CAAmCC,IAAnC,EAAyC;AACxCH,EAAAA,OAAO,CAACV,QAAR,GAAmB,cAAcc,MAAM,CAACD,IAAD,CAApB,GAA6BE,OAAO,CAACF,IAAI,CAACb,QAAN,CAApC,GAAsD,KAAzE;AAEA,SAAO;AACNgB,IAAAA,aAAa,EAAE,6BADT;AAENC,IAAAA,WAAW,EAAEhB;AAFP,GAAP;AAIA;;AAEDW,yBAAyB,CAACM,OAA1B,GAAoC,IAApC;;;;"}